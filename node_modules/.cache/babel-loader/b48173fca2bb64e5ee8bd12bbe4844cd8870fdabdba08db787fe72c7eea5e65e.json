{"ast":null,"code":"const parseTheMealDBToRecipe = meal => {\n  const parseIngredients = meal => {\n    const ingredients = [];\n    let isComplete = false;\n    while (!isComplete) {\n      const ingredient = meal[`strIngredient${ingredients.length + 1}`];\n      const measure = meal[`strMeasure${ingredients.length + 1}`];\n      if (ingredient && measure) {\n        ingredients.push({\n          name: ingredient,\n          quantity: measure\n        });\n      } else {\n        isComplete = true;\n      }\n    }\n    return ingredients;\n  };\n  return {\n    id: meal.idMeal,\n    name: meal.strMeal,\n    description: meal.strInstructions.substring(0, 50) + '...',\n    category: meal.strCategory,\n    ingredients: parseIngredients(meal),\n    instructions: meal.strInstructions,\n    image: meal.strMealThumb,\n    video: meal.strYoutube\n  };\n};\nexport const parseTheMealDBToRecipes = meals => {\n  return meals.map(parseTheMealDBToRecipe).sort(() => Math.random() - 0.5);\n};","map":{"version":3,"names":["parseTheMealDBToRecipe","meal","parseIngredients","ingredients","isComplete","ingredient","length","measure","push","name","quantity","id","idMeal","strMeal","description","strInstructions","substring","category","strCategory","instructions","image","strMealThumb","video","strYoutube","parseTheMealDBToRecipes","meals","map","sort","Math","random"],"sources":["/Users/nathaliabuitrago/Documents/GitHub/plan-your-recipes/src/util/helpers.ts"],"sourcesContent":["import { Ingredient, Recipe } from \"../types\";\n\nconst parseTheMealDBToRecipe = (meal: any):Recipe => {\n  const parseIngredients = (meal: any) => {\n    const ingredients: Ingredient[] = [];\n    let isComplete = false;\n    while (!isComplete) {\n      const ingredient = meal[`strIngredient${ingredients.length + 1}`];\n      const measure = meal[`strMeasure${ingredients.length + 1}`];\n      if (ingredient && measure) {\n        ingredients.push({\n          name: ingredient,\n          quantity: measure,\n        });\n      } else {\n        isComplete = true;\n      }\n    }\n    return ingredients;\n  }\n\n  return {\n    id: meal.idMeal,\n    name: meal.strMeal,\n    description: meal.strInstructions.substring(0, 50) + '...',\n    category: meal.strCategory,\n    ingredients: parseIngredients(meal),\n    instructions: meal.strInstructions,\n    image: meal.strMealThumb,\n    video: meal.strYoutube,\n  };\n}\n\nexport const parseTheMealDBToRecipes = (meals: any[]):Recipe[] => {\n  return meals.map(parseTheMealDBToRecipe).sort(() => Math.random() - 0.5);\n}"],"mappings":"AAEA,MAAMA,sBAAsB,GAAIC,IAAS,IAAY;EACnD,MAAMC,gBAAgB,GAAID,IAAS,IAAK;IACtC,MAAME,WAAyB,GAAG,EAAE;IACpC,IAAIC,UAAU,GAAG,KAAK;IACtB,OAAO,CAACA,UAAU,EAAE;MAClB,MAAMC,UAAU,GAAGJ,IAAI,CAAE,gBAAeE,WAAW,CAACG,MAAM,GAAG,CAAE,EAAC,CAAC;MACjE,MAAMC,OAAO,GAAGN,IAAI,CAAE,aAAYE,WAAW,CAACG,MAAM,GAAG,CAAE,EAAC,CAAC;MAC3D,IAAID,UAAU,IAAIE,OAAO,EAAE;QACzBJ,WAAW,CAACK,IAAI,CAAC;UACfC,IAAI,EAAEJ,UAAU;UAChBK,QAAQ,EAAEH;QACZ,CAAC,CAAC;MACJ,CAAC,MAAM;QACLH,UAAU,GAAG,IAAI;MACnB;IACF;IACA,OAAOD,WAAW;EACpB,CAAC;EAED,OAAO;IACLQ,EAAE,EAAEV,IAAI,CAACW,MAAM;IACfH,IAAI,EAAER,IAAI,CAACY,OAAO;IAClBC,WAAW,EAAEb,IAAI,CAACc,eAAe,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK;IAC1DC,QAAQ,EAAEhB,IAAI,CAACiB,WAAW;IAC1Bf,WAAW,EAAED,gBAAgB,CAACD,IAAI,CAAC;IACnCkB,YAAY,EAAElB,IAAI,CAACc,eAAe;IAClCK,KAAK,EAAEnB,IAAI,CAACoB,YAAY;IACxBC,KAAK,EAAErB,IAAI,CAACsB;EACd,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,uBAAuB,GAAIC,KAAY,IAAc;EAChE,OAAOA,KAAK,CAACC,GAAG,CAAC1B,sBAAsB,CAAC,CAAC2B,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;AAC1E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}